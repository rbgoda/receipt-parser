{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNk0pxL5+KydIwUXU/O4VqV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":196},"id":"vbb-VGypbIZv","executionInfo":{"status":"ok","timestamp":1758125478248,"user_tz":-480,"elapsed":21120,"user":{"displayName":"Rajesh Goda","userId":"07440977608287202476"}},"outputId":"5e9a3007-3841-4f08-f2e9-9522bb4561d0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Processing expense1.jpeg...\n","Successfully parsed expense1.jpeg.\n","Processing expense3.jpeg...\n","Successfully parsed expense3.jpeg.\n","Processing expense4.jpeg...\n","Successfully parsed expense4.jpeg.\n","Processing expense2.jpeg...\n","Successfully parsed expense2.jpeg.\n","\n","Analysis complete! Data exported to receipt_analysis.csv.\n"]}],"source":["import google.generativeai as genai\n","import PIL.Image\n","import json\n","import pandas as pd\n","import os\n","from google.colab import userdata\n","\n","# Load your API key from Colab secrets\n","GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')\n","genai.configure(api_key=GOOGLE_API_KEY)\n","\n","model = genai.GenerativeModel('gemini-1.5-flash-latest')\n","\n","# This is the directory where you uploaded your receipts in Colab\n","receipts_dir = '/content/receipts'\n","\n","# The prompt to send to the Gemini API\n","prompt = \"\"\"\n","Analyze this receipt image. Extract the following information and return it as a JSON object:\n","- **business_name**: The name of the business.\n","- **date**: The date of the transaction.\n","- **total**: The grand total of the transaction.\n","- **items**: An array of objects, where each object has:\n","  - **name**: The name of the item.\n","  - **price**: The price of the item.\n","  - **quantity**: The quantity of the item.\n","\n","If any information is not found, use a null value. If the list of items is empty, use an empty array `[]`. Do not include any other text, just the JSON.\n","\"\"\"\n","\n","# A list to store the parsed data for all receipts\n","all_receipt_data = []\n","\n","# Loop through all files in the directory\n","for filename in os.listdir(receipts_dir):\n","    if filename.endswith(('.jpg', '.jpeg', '.png')): # Process only image files\n","        image_path = os.path.join(receipts_dir, filename)\n","\n","        try:\n","            img = PIL.Image.open(image_path)\n","            print(f\"Processing {filename}...\")\n","\n","            # Send the image and prompt to the Gemini API\n","            response = model.generate_content([prompt, img])\n","\n","            # Clean and parse the JSON output\n","            json_text = response.text.strip().lstrip('`').rstrip('`').lstrip('json').strip()\n","\n","            try:\n","                data = json.loads(json_text)\n","                # Add the filename to the data for tracking\n","                data['filename'] = filename\n","                all_receipt_data.append(data)\n","                print(f\"Successfully parsed {filename}.\")\n","            except json.JSONDecodeError as e:\n","                print(f\"Error parsing JSON from {filename}: {e}\")\n","                print(f\"Raw response text: {json_text}\")\n","\n","        except Exception as e:\n","            print(f\"An error occurred while processing {filename}: {e}\")\n","\n","# Flatten the nested 'items' data to prepare for a spreadsheet\n","flattened_data = []\n","for receipt in all_receipt_data:\n","    receipt_items = receipt.get('items', [])\n","    if receipt_items:\n","        for item in receipt_items:\n","            flattened_data.append({\n","                'filename': receipt.get('filename'),\n","                'business_name': receipt.get('business_name'),\n","                'date': receipt.get('date'),\n","                'total': receipt.get('total'),\n","                'item_name': item.get('name'),\n","                'item_price': item.get('price'),\n","                'item_quantity': item.get('quantity'),\n","            })\n","    else:\n","        # Handle receipts with no detected items\n","        flattened_data.append({\n","            'filename': receipt.get('filename'),\n","            'business_name': receipt.get('business_name'),\n","            'date': receipt.get('date'),\n","            'total': receipt.get('total'),\n","            'item_name': None,\n","            'item_price': None,\n","            'item_quantity': None,\n","        })\n","\n","\n","# Convert the flattened list of dictionaries to a Pandas DataFrame\n","df = pd.DataFrame(flattened_data)\n","\n","# Export the DataFrame to a CSV file\n","output_csv_path = 'receipt_analysis.csv'\n","df.to_csv(output_csv_path, index=False)\n","\n","print(f\"\\nAnalysis complete! Data exported to {output_csv_path}.\")"]}]}